using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using TData.Cache;
using TData.Configuration;
using TData.Core.FluentApi;

namespace TData.Tests.Cache
{
    public class SQLiteCacheTests
    {
        string ConnectionString => Environment.GetEnvironmentVariable("SqlServerCnx") ?? "Data Source=localhost;Initial Catalog=tempdb;Persist Security Info=True;User ID=sa;Password=Mssql_Test;TrustServerCertificate=true;packet size=2048;ApplicationIntent=ReadOnly;Min Pool Size=32;Max Pool Size=64;Pooling=true";

        #region JSON handlers
        class CacheItemConverter : JsonConverter
        {
            public override bool CanConvert(Type objectType)
            {
                return true;
            }

            public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.StartArray)
                {
                    return JArray.Load(reader).ToObject(objectType);
                }
                else if (reader.TokenType == JsonToken.StartObject)
                {
                    return JObject.Load(reader).ToObject(objectType);
                }
                else
                {
                    throw new JsonSerializationException($"Unexpected token {reader.TokenType} when parsing {objectType}.");
                }
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                throw new NotImplementedException();
            }
        }

        JsonSerializerSettings JSONSettings = new JsonSerializerSettings()
        {
            DateFormatString = "yyyy-MM-ddTHH:mm:ss",
            DateTimeZoneHandling = DateTimeZoneHandling.RoundtripKind,
        };

        object JSONDeserialize(in object rawData, in Type type, in bool treatAsList) =>
                            JsonConvert.DeserializeObject((string)rawData, type, settings: new JsonSerializerSettings { Converters = new List<JsonConverter> { new CacheItemConverter() } });

        object JSONSerialize(in object data) =>
                        JsonConvert.SerializeObject(data, settings: JSONSettings);

        #endregion

        [OneTimeSetUp]
        public void Setup()
        {
            var tableBuilder = new TableBuilder();
            var userTable = tableBuilder.AddTable<User>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<User>().DbName("APP_USER");
            userTable.Column<User>(x => x.UserTypeId).DbName("USER_TYPE_ID");
            DbHub.AddTableBuilder(tableBuilder);

            DbCacheConfig.Register(
            new DbSettings("db_source", DbProvider.SqlServer, ConnectionString),
            new CacheSettings(DbCacheProvider.Sqlite, isTextFormat: true, JSONSerialize, JSONDeserialize) { TTL = TimeSpan.FromHours(1) });
        }

        [Test, Order(1)]
        public void TableCreation()
        {
            var dbContext = DbHub.Use("db_source", buffered: false);

            dbContext.ExecuteBlock((db) =>
            {
                //create table
                db.Execute("DROP TABLE IF EXISTS APP_USER");
                db.Execute("CREATE TABLE APP_USER(ID INT PRIMARY KEY IDENTITY(1,1), USER_TYPE_ID INT NOT NULL, NAME VARCHAR(50), STATE BIT, SALARY DECIMAL(15,4), BIRTHDAY DATE, USERCODE UniqueIdentifier, ICON VARBINARY(MAX))");

                //seed data
                var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
                dbContext.Insert(new User(0, 2, "Peter", false, 3350.99m, new DateTime(1989, 5, 17), Guid.NewGuid(), icon));
                dbContext.Insert(new User(0, 2, "Jean", true, 1346.23m, new DateTime(1989, 5, 17), Guid.NewGuid(), icon));
                dbContext.Insert(new User(0, 1, "John", true, 6344.98m, new DateTime(1989, 5, 17), Guid.NewGuid(), icon));
            });

            Assert.Pass();
        }

        [Test]
        [Repeat(10)]
        public void PopulateCache()
        {
            var data = CachedDbHub.Use("db_source").FetchList<User>();
            Assert.That(data, Is.Not.Null);
            Assert.That(data.Count, Is.EqualTo(3));
        }

        [Test]
        [Repeat(10)]
        public void RefreshQueryWithKey()
        {
            var data = CachedDbHub.Use("db_source").FetchList<User>(key: nameof(User));

            //insert a new record
            DbHub.Use("db_source").Insert(new User(0, 1, "John", true, 6344.98m, new DateTime(1989, 5, 17), Guid.NewGuid(), null));

            var context = CachedDbHub.Use("db_source");
            context.Refresh(nameof(User), throwErrorIfNotFound: true);

            var newData = context.FetchList<User>(key: nameof(User));
            Assert.That(newData.Count, Is.EqualTo(data.Count + 1));
        }

        [Test]
        [Repeat(10)]
        public void RefreshQueryWithoutKey()
        {
            string query = "SELECT ID, NAME FROM APP_USER";
            var data = CachedDbHub.Use("db_source").FetchList<User>(query);

            //insert a new record
            DbHub.Use("db_source").Insert(new User(0, 1, "John", true, 6344.98m, new DateTime(1989, 5, 17), Guid.NewGuid(), null));
            
            var newData = CachedDbHub.Use("db_source").FetchList<User>(query, refresh: true);
            Assert.That(newData.Count, Is.EqualTo(data.Count + 1));
        }

        [Test]
        [Repeat(10)]
        public void RefreshTupleWithKey()
        {
            string query = "SELECT ID, NAME FROM APP_USER; SELECT ID, NAME FROM APP_USER";
            var data = CachedDbHub.Use("db_source").FetchTuple<User, User>(query, key: "Q1");

            //insert a new record
            DbHub.Use("db_source").Insert(new User(0, 1, "John", true, 6344.98m, new DateTime(1989, 5, 17), Guid.NewGuid(), null));

            var context = CachedDbHub.Use("db_source");
            context.Refresh("Q1", throwErrorIfNotFound: true);

            var newData = CachedDbHub.Use("db_source").FetchTuple<User, User>(query, refresh: true);
            Assert.That(newData.Item1.Count, Is.EqualTo(data.Item1.Count + 1));
            Assert.That(newData.Item2.Count, Is.EqualTo(data.Item2.Count + 1));
        }

        [Test]
        [Repeat(10)]
        public void RefreshTupleWithoutKey()
        {
            string query = "SELECT ID, NAME FROM APP_USER; SELECT ID, NAME FROM APP_USER";
            var data = CachedDbHub.Use("db_source").FetchTuple<User, User>(query);

            //insert a new record
            DbHub.Use("db_source").Insert(new User(0, 1, "John", true, 6344.98m, new DateTime(1989, 5, 17), Guid.NewGuid(), null));

            var newData = CachedDbHub.Use("db_source").FetchTuple<User, User>(query, refresh: true);
            Assert.That(newData.Item1.Count, Is.EqualTo(data.Item1.Count + 1));
            Assert.That(newData.Item2.Count, Is.EqualTo(data.Item2.Count + 1));
        }
    }
}
