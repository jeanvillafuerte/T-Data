using System.Data;
using System.Data.Common;
using Microsoft.Data.SqlClient;
using Oracle.ManagedDataAccess.Client;
using TData.Configuration;
using TData.Core.FluentApi;
using TData.Core.Provider;
using static TData.Core.Provider.DatabaseProvider;

namespace TData.Tests
{
	public class CommandSetupTests
    {
        
        public string SqlConnectionString => Environment.GetEnvironmentVariable("SqlServerCnx") ?? "Data Source=localhost;Initial Catalog=tempdb;Persist Security Info=True;User ID=sa;Password=Mssql_Test;TrustServerCertificate=true;packet size=2048;ApplicationIntent=ReadOnly;Min Pool Size=32;Max Pool Size=64;Pooling=true";
        public string OracleConnectionString => Environment.GetEnvironmentVariable("OracleCnx") ?? "Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=FREEPDB1)));Persist Security Info=True;User ID=SYS;DBA Privilege=SYSDBA;Password=Oracle_Test;Statement Cache Size=10";

        [Test]
        public void CleanMetaDataTest()
        {
            DbBase.Clear();
            Assert.Pass();
		}

        #region configuration

        [SetUp]
        public void Setup()
        {
            DbConfig.Clear();
        }

        [Test]
        public void BasicConfiguration()
        {
            var tableBuilder = new TableBuilder();
            tableBuilder.AddTable<User>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<User>().DbName("USERS");
            DbHub.AddDbBuilder(tableBuilder);
            var existsTable = DbConfig.Tables.TryGetValue(typeof(User).FullName, out _);
            Assert.That(existsTable, Is.True);
        }

        [Test]
        public void BasicManualConfiguration()
        {
            var tableBuilder = new TableBuilder();
            var table = tableBuilder.AddTable<User>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<User>().DbName("USERS");
            table.Column<User>(x => x.UserTypeId)
                    .DbType("INT");

            table.Column<User>(x => x.Name)
                    .Size(50);

            table.Column<User>(x => x.Salary)
                   .Scale(2)
                   .Precision(12);

            DbHub.AddDbBuilder(tableBuilder);

            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            var user = new User(0, 2, "Peter", false, 3350.99m, new DateTime(1989, 5, 17), Guid.NewGuid(), icon);
            var options = new LoaderConfiguration(
                keyAsReturnValue: true,
                skipAutoGeneratedColumn: false,
                generateParameterWithKeys: false,
                additionalOracleRefCursors: 0,
                provider: SqlProvider.SqlServer,
                fetchSize: 0,
                timeout: 0,
                commandType: CommandType.Text,
                isTransactionOperation: false,
                prepareStatements: false,
                canPrepareStatement: true,
                shouldIncludeSequentialBehavior: false);

            DbParameterInfo[] parameters = null;
            var setupCommand = (ConfigureCommandDelegate)DatabaseHelperProvider.GetSetupCommandDelegate(true, typeof(User), options, false, out _, ref parameters);

            using var SqlCommand = (SqlCommand)setupCommand(user, SqlConnectionString, "SOME_SCRIPT", null);

            //add tests for every parameter
            Assert.That(SqlCommand.Parameters[0].ParameterName, Is.EqualTo("Id"));
            Assert.That(SqlCommand.Parameters[0].Value, Is.EqualTo(user.Id));
            Assert.That(SqlCommand.Parameters[0].SqlDbType, Is.EqualTo(SqlDbType.Int));
            Assert.That(SqlCommand.Parameters[0].Direction, Is.EqualTo(ParameterDirection.Input));

            Assert.That(SqlCommand.Parameters[1].ParameterName, Is.EqualTo("UserTypeId"));
            Assert.That(SqlCommand.Parameters[1].Value, Is.EqualTo(user.UserTypeId));
            Assert.That(SqlCommand.Parameters[1].SqlDbType, Is.EqualTo(SqlDbType.Int));
            Assert.That(SqlCommand.Parameters[1].Direction, Is.EqualTo(ParameterDirection.Input));


            Assert.That(SqlCommand.Parameters[2].ParameterName, Is.EqualTo("Name"));
            Assert.That(SqlCommand.Parameters[2].Value, Is.EqualTo(user.Name));
            Assert.That(SqlCommand.Parameters[2].SqlDbType, Is.EqualTo(SqlDbType.NVarChar));
            Assert.That(SqlCommand.Parameters[2].Direction, Is.EqualTo(ParameterDirection.Input));
            Assert.That(SqlCommand.Parameters[2].Size, Is.EqualTo(50));

            Assert.That(SqlCommand.Parameters[3].ParameterName, Is.EqualTo("State"));
            Assert.That(SqlCommand.Parameters[3].Value, Is.EqualTo(user.State));
            Assert.That(SqlCommand.Parameters[3].SqlDbType, Is.EqualTo(SqlDbType.Bit));
            Assert.That(SqlCommand.Parameters[3].Direction, Is.EqualTo(ParameterDirection.Input));

            Assert.That(SqlCommand.Parameters[4].ParameterName, Is.EqualTo("Salary"));
            Assert.That(SqlCommand.Parameters[4].Value, Is.EqualTo(user.Salary));
            Assert.That(SqlCommand.Parameters[4].SqlDbType, Is.EqualTo(SqlDbType.Decimal));
            Assert.That(SqlCommand.Parameters[4].Direction, Is.EqualTo(ParameterDirection.Input));
            Assert.That(SqlCommand.Parameters[4].Scale, Is.EqualTo(2));
            Assert.That(SqlCommand.Parameters[4].Precision, Is.EqualTo(12));

            Assert.That(SqlCommand.Parameters[5].ParameterName, Is.EqualTo("Birthday"));
            Assert.That(SqlCommand.Parameters[5].Value, Is.EqualTo(user.Birthday));
            Assert.That(SqlCommand.Parameters[5].SqlDbType, Is.EqualTo(SqlDbType.DateTime));
            Assert.That(SqlCommand.Parameters[5].Direction, Is.EqualTo(ParameterDirection.Input));

            Assert.That(SqlCommand.Parameters[6].ParameterName, Is.EqualTo("UserCode"));
            Assert.That(SqlCommand.Parameters[6].Value, Is.EqualTo(user.UserCode));
            Assert.That(SqlCommand.Parameters[6].SqlDbType, Is.EqualTo(SqlDbType.UniqueIdentifier));
            Assert.That(SqlCommand.Parameters[6].Direction, Is.EqualTo(ParameterDirection.Input));

            Assert.That(SqlCommand.Parameters[7].ParameterName, Is.EqualTo("Icon"));
            Assert.That(SqlCommand.Parameters[7].Value, Is.EqualTo(user.Icon));
            Assert.That(SqlCommand.Parameters[7].SqlDbType, Is.EqualTo(SqlDbType.VarBinary));
            Assert.That(SqlCommand.Parameters[7].Direction, Is.EqualTo(ParameterDirection.Input));
        }

        [Test]
        public void NullableParametersConfiguration()
        {
            var tableBuilder = new TableBuilder();
            var table = tableBuilder.AddTable<UserNullableRecord>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<UserNullableRecord>().DbName("USERS");
            table.Column<UserNullableRecord>(x => x.UserTypeId)
                    .DbType("INT");

            table.Column<UserNullableRecord>(x => x.Name)
                    .Size(50);

            table.Column<UserNullableRecord>(x => x.Salary)
                   .Scale(2)
                   .Precision(12);

            DbHub.AddDbBuilder(tableBuilder);

            var user = new UserNullableRecord(0, 2, "Peter", null, null, null, null, null);
            var options = new LoaderConfiguration(
                keyAsReturnValue: true,
                skipAutoGeneratedColumn: false,
                generateParameterWithKeys: false,
                additionalOracleRefCursors: 0,
                provider: SqlProvider.SqlServer,
                fetchSize: 0,
                timeout: 0,
                commandType: CommandType.Text,
                isTransactionOperation: false,
                prepareStatements: false,
                canPrepareStatement: true,
                shouldIncludeSequentialBehavior: false);

            DbParameterInfo[] parameters = null;
            var setupCommand = (ConfigureCommandDelegate)DatabaseHelperProvider.GetSetupCommandDelegate(true, typeof(UserNullableRecord), options, false, out _, ref parameters);

            using var SqlCommand = (SqlCommand)setupCommand(user, SqlConnectionString, "SOME_SCRIPT", null);

            //add tests for every parameter
            Assert.That(SqlCommand.Parameters[0].ParameterName, Is.EqualTo("Id"));
            Assert.That(SqlCommand.Parameters[0].Value, Is.EqualTo(user.Id));
            Assert.That(SqlCommand.Parameters[0].SqlDbType, Is.EqualTo(SqlDbType.Int));
            Assert.That(SqlCommand.Parameters[0].Direction, Is.EqualTo(ParameterDirection.Input));

            Assert.That(SqlCommand.Parameters[1].ParameterName, Is.EqualTo("UserTypeId"));
            Assert.That(SqlCommand.Parameters[1].Value, Is.EqualTo(user.UserTypeId));
            Assert.That(SqlCommand.Parameters[1].SqlDbType, Is.EqualTo(SqlDbType.Int));
            Assert.That(SqlCommand.Parameters[1].Direction, Is.EqualTo(ParameterDirection.Input));


            Assert.That(SqlCommand.Parameters[2].ParameterName, Is.EqualTo("Name"));
            Assert.That(SqlCommand.Parameters[2].Value, Is.EqualTo(user.Name));
            Assert.That(SqlCommand.Parameters[2].SqlDbType, Is.EqualTo(SqlDbType.NVarChar));
            Assert.That(SqlCommand.Parameters[2].Direction, Is.EqualTo(ParameterDirection.Input));
            Assert.That(SqlCommand.Parameters[2].Size, Is.EqualTo(50));

            Assert.That(SqlCommand.Parameters[3].ParameterName, Is.EqualTo("State"));
            Assert.That(SqlCommand.Parameters[3].Value, Is.EqualTo(DBNull.Value));
            Assert.That(SqlCommand.Parameters[3].SqlDbType, Is.EqualTo(SqlDbType.Bit));
            Assert.That(SqlCommand.Parameters[3].Direction, Is.EqualTo(ParameterDirection.Input));

            Assert.That(SqlCommand.Parameters[4].ParameterName, Is.EqualTo("Salary"));
            Assert.That(SqlCommand.Parameters[4].Value, Is.EqualTo(DBNull.Value));
            Assert.That(SqlCommand.Parameters[4].SqlDbType, Is.EqualTo(SqlDbType.Decimal));
            Assert.That(SqlCommand.Parameters[4].Direction, Is.EqualTo(ParameterDirection.Input));
            Assert.That(SqlCommand.Parameters[4].Scale, Is.EqualTo(2));
            Assert.That(SqlCommand.Parameters[4].Precision, Is.EqualTo(12));

            Assert.That(SqlCommand.Parameters[5].ParameterName, Is.EqualTo("Birthday"));
            Assert.That(SqlCommand.Parameters[5].Value, Is.EqualTo(DBNull.Value));
            Assert.That(SqlCommand.Parameters[5].SqlDbType, Is.EqualTo(SqlDbType.DateTime));
            Assert.That(SqlCommand.Parameters[5].Direction, Is.EqualTo(ParameterDirection.Input));

            Assert.That(SqlCommand.Parameters[6].ParameterName, Is.EqualTo("UserCode"));
            Assert.That(SqlCommand.Parameters[6].Value, Is.EqualTo(DBNull.Value));
            Assert.That(SqlCommand.Parameters[6].SqlDbType, Is.EqualTo(SqlDbType.UniqueIdentifier));
            Assert.That(SqlCommand.Parameters[6].Direction, Is.EqualTo(ParameterDirection.Input));

            Assert.That(SqlCommand.Parameters[7].ParameterName, Is.EqualTo("Icon"));
            Assert.That(SqlCommand.Parameters[7].Value, Is.EqualTo(DBNull.Value));
            Assert.That(SqlCommand.Parameters[7].SqlDbType, Is.EqualTo(SqlDbType.VarBinary));
            Assert.That(SqlCommand.Parameters[7].Direction, Is.EqualTo(ParameterDirection.Input));
        }

        [Test]
        public void OracleCursorParameterConfiguration()
        {
            var options = new LoaderConfiguration(
                keyAsReturnValue: false,
                skipAutoGeneratedColumn: false,
                generateParameterWithKeys: false,
                additionalOracleRefCursors: 1,
                provider: SqlProvider.Oracle,
                fetchSize: 4096,
                timeout: 3000,
                commandType: CommandType.StoredProcedure,
                isTransactionOperation: false,
                prepareStatements: false,
                canPrepareStatement: false,
                shouldIncludeSequentialBehavior: false);

            DbParameterInfo[] parameters = null;
            var setupCommand = (ConfigureCommandDelegate)DatabaseHelperProvider.GetSetupCommandDelegate(true, null, options, false,out _, ref parameters);

            using var oracleCommand = (OracleCommand)setupCommand(null, OracleConnectionString, "SOME_STORE_PROCEDURE", null);
            
            Assert.That(oracleCommand.Parameters.Count, Is.EqualTo(1));
            Assert.That(oracleCommand.Parameters[0].OracleDbType, Is.EqualTo(OracleDbType.RefCursor));
            Assert.That(oracleCommand.Parameters[0].Direction, Is.EqualTo(ParameterDirection.Output));
            Assert.That(oracleCommand.FetchSize, Is.EqualTo(4096));
            Assert.That(oracleCommand.CommandTimeout, Is.EqualTo(3000));
        }

        [Test]
        public void OracleCursorParameterConfiguration3()
        {
            var options = new LoaderConfiguration(
                keyAsReturnValue: false,
                skipAutoGeneratedColumn: false,
                generateParameterWithKeys: false,
                additionalOracleRefCursors: 3,
                provider: SqlProvider.Oracle,
                fetchSize: 4096,
                timeout: 3000,
                commandType: CommandType.StoredProcedure,
                isTransactionOperation: false,
                prepareStatements: false,
                canPrepareStatement: false,
                shouldIncludeSequentialBehavior: false);

            DbParameterInfo[] parameters = null;
            var setupCommand = (ConfigureCommandDelegate)DatabaseHelperProvider.GetSetupCommandDelegate(true, null, options, false, out _, ref parameters);

            using var oracleCommand = (OracleCommand)setupCommand(null, OracleConnectionString, "SOME_STORE_PROCEDURE", null);

            Assert.That(oracleCommand.Parameters.Count, Is.EqualTo(3));
            Assert.That(oracleCommand.Parameters[0].OracleDbType, Is.EqualTo(OracleDbType.RefCursor));
            Assert.That(oracleCommand.Parameters[0].Direction, Is.EqualTo(ParameterDirection.Output));
            Assert.That(oracleCommand.Parameters[1].OracleDbType, Is.EqualTo(OracleDbType.RefCursor));
            Assert.That(oracleCommand.Parameters[1].Direction, Is.EqualTo(ParameterDirection.Output));
            Assert.That(oracleCommand.Parameters[2].OracleDbType, Is.EqualTo(OracleDbType.RefCursor));
            Assert.That(oracleCommand.Parameters[2].Direction, Is.EqualTo(ParameterDirection.Output));
            Assert.That(oracleCommand.FetchSize, Is.EqualTo(4096));
            Assert.That(oracleCommand.CommandTimeout, Is.EqualTo(3000));
        }

        [Test]
        public void FilterParameterConfiguration()
        {
            var options = new LoaderConfiguration(
                keyAsReturnValue: true,
                skipAutoGeneratedColumn: false,
                generateParameterWithKeys: false,
                additionalOracleRefCursors: 0,
                provider: SqlProvider.SqlServer,
                fetchSize: 0,
                timeout: 0,
                commandType: CommandType.Text,
                isTransactionOperation: false,
                prepareStatements: false,
                canPrepareStatement: true,
                shouldIncludeSequentialBehavior: false);

            var filter = new FilterSalary { SalaryStar = 1000, SalaryEnd = 2000, Total = 0 };
            DbParameterInfo[] parameters = null;
            var setupCommand = (ConfigureCommandDelegate)DatabaseHelperProvider.GetSetupCommandDelegate(true, typeof(FilterSalary), options, false, out _, ref parameters);

            using var SqlCommand = (SqlCommand)setupCommand(filter, SqlConnectionString, "SOME_SCRIPT", null);

            //add tests for every parameter
            Assert.That(SqlCommand.Parameters[0].ParameterName, Is.EqualTo("ss"));
            Assert.That(SqlCommand.Parameters[0].Value, Is.EqualTo(filter.SalaryStar));
            Assert.That(SqlCommand.Parameters[0].SqlDbType, Is.EqualTo(SqlDbType.Decimal));
            Assert.That(SqlCommand.Parameters[0].Direction, Is.EqualTo(ParameterDirection.Input));
            Assert.That(SqlCommand.Parameters[0].Precision, Is.EqualTo(10));
            Assert.That(SqlCommand.Parameters[0].Scale, Is.EqualTo(2));

            Assert.That(SqlCommand.Parameters[1].ParameterName, Is.EqualTo("se"));
            Assert.That(SqlCommand.Parameters[1].Value, Is.EqualTo(filter.SalaryEnd));
            Assert.That(SqlCommand.Parameters[1].SqlDbType, Is.EqualTo(SqlDbType.Decimal));
            Assert.That(SqlCommand.Parameters[1].Direction, Is.EqualTo(ParameterDirection.Input));
            Assert.That(SqlCommand.Parameters[0].Precision, Is.EqualTo(10));
            Assert.That(SqlCommand.Parameters[0].Scale, Is.EqualTo(2));

            Assert.That(SqlCommand.Parameters[2].ParameterName, Is.EqualTo("t"));
            //must not assign value to output parameters
            Assert.That(SqlCommand.Parameters[2].Value, Is.Null);
            Assert.That(SqlCommand.Parameters[2].SqlDbType, Is.EqualTo(SqlDbType.Int));
            Assert.That(SqlCommand.Parameters[2].Direction, Is.EqualTo(ParameterDirection.Output));
        }

        [Test]
        public void PrepareCommandInTransaction()
        {
            var options = new LoaderConfiguration(
                keyAsReturnValue: true,
                skipAutoGeneratedColumn: false,
                generateParameterWithKeys: false,
                additionalOracleRefCursors: 0,
                provider: SqlProvider.SqlServer,
                fetchSize: 0,
                timeout: 0,
                commandType: CommandType.Text,
                isTransactionOperation: true,
                prepareStatements: true,
                canPrepareStatement: true,
                shouldIncludeSequentialBehavior: false);

            var filter = new FilterSalary { SalaryStar = 1000, SalaryEnd = 2000, Total = 0 };
            DbParameterInfo[] parameters = null;
            var setupCommand = (ConfigureCommandDelegate)DatabaseHelperProvider.GetSetupCommandDelegate(true, typeof(FilterSalary), options, false, out _, ref parameters);

            var connection = new SqlConnection(SqlConnectionString);
            connection.Open();
            using var transaction = connection.BeginTransaction();
           
            using var command = connection.CreateCommand();
            command.Transaction = transaction;
            command.CommandType = CommandType.Text;
            command.CommandText = "SELECT 'SOME DATA'";

            using var SqlCommand = (SqlCommand)setupCommand(filter, null, null, command);

            //ensure is reusing the same command
            Assert.That(SqlCommand.Connection.State, Is.EqualTo(ConnectionState.Open));
            Assert.That(SqlCommand, Is.EqualTo(command));

            Assert.That(SqlCommand.Parameters[0].ParameterName, Is.EqualTo("ss"));
            Assert.That(SqlCommand.Parameters[0].Value, Is.EqualTo(filter.SalaryStar));
            Assert.That(SqlCommand.Parameters[0].SqlDbType, Is.EqualTo(SqlDbType.Decimal));
            Assert.That(SqlCommand.Parameters[0].Direction, Is.EqualTo(ParameterDirection.Input));
            Assert.That(SqlCommand.Parameters[0].Precision, Is.EqualTo(10));
            Assert.That(SqlCommand.Parameters[0].Scale, Is.EqualTo(2));

            Assert.That(SqlCommand.Parameters[1].ParameterName, Is.EqualTo("se"));
            Assert.That(SqlCommand.Parameters[1].Value, Is.EqualTo(filter.SalaryEnd));
            Assert.That(SqlCommand.Parameters[1].SqlDbType, Is.EqualTo(SqlDbType.Decimal));
            Assert.That(SqlCommand.Parameters[1].Direction, Is.EqualTo(ParameterDirection.Input));
            Assert.That(SqlCommand.Parameters[0].Precision, Is.EqualTo(10));
            Assert.That(SqlCommand.Parameters[0].Scale, Is.EqualTo(2));

            Assert.That(SqlCommand.Parameters[2].ParameterName, Is.EqualTo("t"));
            //must not assign value to output parameters
            Assert.That(SqlCommand.Parameters[2].Value, Is.Null);
            Assert.That(SqlCommand.Parameters[2].SqlDbType, Is.EqualTo(SqlDbType.Int));
            Assert.That(SqlCommand.Parameters[2].Direction, Is.EqualTo(ParameterDirection.Output));
        }

        [Test]
        public void NoPrepareCommandInTransaction()
        {
            var options = new LoaderConfiguration(
                keyAsReturnValue: true,
                skipAutoGeneratedColumn: false,
                generateParameterWithKeys: false,
                additionalOracleRefCursors: 0,
                provider: SqlProvider.SqlServer,
                fetchSize: 0,
                timeout: 0,
                commandType: CommandType.Text,
                isTransactionOperation: true,
                prepareStatements: false,
                canPrepareStatement: false,
                shouldIncludeSequentialBehavior: false);

            var filter = new FilterSalary { SalaryStar = 1000, SalaryEnd = 2000, Total = 0 };

            DbParameterInfo[] parameters = null;
            var setupCommand = (ConfigureCommandDelegate)DatabaseHelperProvider.GetSetupCommandDelegate(true, typeof(FilterSalary), options, false,out _, ref parameters);

            var connection = new SqlConnection(SqlConnectionString);
            connection.Open();
            using var transaction = connection.BeginTransaction();

            using var command = connection.CreateCommand();
            command.Transaction = transaction;
            command.CommandType = CommandType.Text;
            command.CommandText = "SELECT 'SOME DATA'";

            using var SqlCommand = (SqlCommand)setupCommand(filter, null, null, command);

            //ensure is reusing the same command
            Assert.That(SqlCommand.Connection.State, Is.EqualTo(ConnectionState.Open));
            Assert.That(SqlCommand, Is.EqualTo(command));

            Assert.That(SqlCommand.Parameters[0].ParameterName, Is.EqualTo("ss"));
            Assert.That(SqlCommand.Parameters[0].Value, Is.EqualTo(filter.SalaryStar));
            Assert.That(SqlCommand.Parameters[0].SqlDbType, Is.EqualTo(SqlDbType.Decimal));
            Assert.That(SqlCommand.Parameters[0].Direction, Is.EqualTo(ParameterDirection.Input));
            Assert.That(SqlCommand.Parameters[0].Precision, Is.EqualTo(10));
            Assert.That(SqlCommand.Parameters[0].Scale, Is.EqualTo(2));

            Assert.That(SqlCommand.Parameters[1].ParameterName, Is.EqualTo("se"));
            Assert.That(SqlCommand.Parameters[1].Value, Is.EqualTo(filter.SalaryEnd));
            Assert.That(SqlCommand.Parameters[1].SqlDbType, Is.EqualTo(SqlDbType.Decimal));
            Assert.That(SqlCommand.Parameters[1].Direction, Is.EqualTo(ParameterDirection.Input));
            Assert.That(SqlCommand.Parameters[0].Precision, Is.EqualTo(10));
            Assert.That(SqlCommand.Parameters[0].Scale, Is.EqualTo(2));

            Assert.That(SqlCommand.Parameters[2].ParameterName, Is.EqualTo("t"));
            //must not assign value to output parameters
            Assert.That(SqlCommand.Parameters[2].Value, Is.Null);
            Assert.That(SqlCommand.Parameters[2].SqlDbType, Is.EqualTo(SqlDbType.Int));
            Assert.That(SqlCommand.Parameters[2].Direction, Is.EqualTo(ParameterDirection.Output));
        }
        #endregion
    }
}
