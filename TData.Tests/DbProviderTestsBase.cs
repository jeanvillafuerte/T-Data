using System.Data;
using System.Reflection;
using System.Text;
using TData.Attributes;
using TData.Configuration;
using TData.Core.FluentApi;
using TData.Core.QueryGenerator;

namespace TData.Tests
{
    public abstract class DbProviderTestsBase
    {
        protected abstract string ConnectionString { get; }
        protected abstract bool SkipStoreProcedures { get; }
        protected abstract string BindVariable { get; }
        protected abstract DbProvider DbProvider { get; }

        protected string DbSignature;

        private void SkipIfNecessary()
        {
            if (SkipStoreProcedures)
            {
                Assert.Ignore("Store procedures are not supported by this provider.");
            }
        }

        [OneTimeSetUp]
        public void Initialize()
        {
            var tableBuilder = new TableBuilder();
            var userTable = tableBuilder.AddTable<User>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<User>().DbName("APP_USER");
            userTable.Column<User>(x => x.UserTypeId).DbName("USER_TYPE_ID");
            tableBuilder.AddTable<UserType>(x => x.Id, keyAutoGenerated: false).AddFieldsAsColumns<UserType>().DbName("USER_TYPE");
            tableBuilder.AddTable<Book>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<Book>().DbName("BOOK");

            //extra maps
            var table2 = tableBuilder.AddTable<UserNullableRecord>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<UserNullableRecord>().DbName("APP_USER");
            table2.Column<UserNullableRecord>(x => x.UserTypeId).DbName("USER_TYPE_ID");
            var table3 = tableBuilder.AddTable<UserNullableClass>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<UserNullableClass>().DbName("APP_USER");
            table3.Column<UserNullableClass>(x => x.UserTypeId).DbName("USER_TYPE_ID");

            DbHub.AddTableBuilder(tableBuilder);

            DbSignature = $"Db-{Guid.NewGuid()}";
            DbConfig.Register(new DbSettings(DbSignature, DbProvider, ConnectionString) { ConnectionTimeout = 300 });
        }

        [Test, Order(10)]
        [TestCase(100)]
        [TestCase(200)]
        [TestCase(500)]
        [TestCase(1000)]
        public void FetchPageList(int pageSize)
        {
            var dbContext = DbHub.Use(DbSignature);
            foreach (var items in dbContext.FetchPagedList<User>("SELECT * FROM APP_USER ORDER BY 1", offset: 0, pageSize, null))
            {
                Assert.That(items.Count, Is.GreaterThan(0));
            }
        }

        [Test, Order(10)]
        [TestCase(100)]
        [TestCase(200)]
        [TestCase(500)]
        [TestCase(1000)]
        public void FetchPageRows(int pageSize)
        {
            var dbContext = DbHub.Use(DbSignature);
            foreach (var items in dbContext.FetchPagedRows("SELECT * FROM APP_USER ORDER BY 1", offset: 0, pageSize, null))
            {
                Assert.That(items.Count, Is.GreaterThan(0));
            }
        }

        [Test, Order(10)]
        [TestCase(100)]
        [TestCase(200)]
        [TestCase(500)]
        [TestCase(1000)]
        public async Task FetchPageListAsync(int pageSize)
        {
            var dbContext = DbHub.Use(DbSignature);
            await foreach (var items in dbContext.FetchPagedListAsync<User>("SELECT * FROM APP_USER ORDER BY 1", offset: 0, pageSize, null, CancellationToken.None))
            {
                Assert.That(items.Count, Is.GreaterThan(0));
            }
        }

        [Test]
        public void UpdateIfSingleColumn()
        {
            var data = new[] { (11, 7777.6666m) };
            var context = DbHub.Use(DbSignature);
            context.UpdateIf<User>(x => x.Id == 1, (f => f.Salary, 7777.6666m));
            var user = context.FetchOne<User>(x => x.Id == 1);
            Assert.That(user, Is.Not.Null);
            Assert.That(user.Salary, Is.EqualTo(7777.6666m));
        }

        [Test]
        public void UpdateIfMultipleColumns()
        {
            var context = DbHub.Use(DbSignature);
            context.UpdateIf<User>(x => x.Id == 1,
                (f => f.Salary, 7777.6666m),
                (f => f.Name, "TData 2")
            );

            var user = context.FetchOne<User>(x => x.Id == 1);
            Assert.That(user, Is.Not.Null);
            Assert.That(user.Salary, Is.EqualTo(7777.6666m));
            Assert.That(user.Name, Is.EqualTo("TData 2"));
        }

        [Test]
        public void DeleteUser()
        {
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            var id = dbContext.Insert<User, int>(new User(0, 1, "TData", true, 6666.888m, new DateTime(1984, 4, 8), Guid.NewGuid(), icon));
            Assert.That(id, Is.GreaterThan(0));
            var user = dbContext.FetchOne<User>(x => x.Id == id);
            Assert.That(user, Is.Not.Null);
            dbContext.Delete(user);
            Assert.Pass();
        }

        [Test]
        public void DeleteIf()
        {
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            int[] ids = new int[2];
            dbContext.ExecuteBlock((db) =>
            {
                ids[0] = db.Insert<User, int>(new User(0, 1, "Ron", true, 3323.45m, new DateTime(1984, 4, 8), Guid.NewGuid(), icon));
                ids[1] = db.Insert<User, int>(new User(0, 1, "Harry", true, 6534.32m, new DateTime(1984, 4, 8), Guid.NewGuid(), icon));
            });

            dbContext.DeleteIf<User>(x => ids.Contains(x.Id));
        }
        #region data types
        [Test]
        public void GuidTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var param = new { Value = Guid.NewGuid() };
            var data = dbContext.ExecuteScalar<Guid>($"SELECT {BindVariable}Value", param);
            Assert.That(param.Value, Is.EqualTo(data));

            var query = $"SELECT {BindVariable}Value as Value";
            query = DbProvider == DbProvider.Oracle ? query + " FROM DUAL" : query;
            var data2 = dbContext.FetchOne<SimpleGuidRecord>(query, param);
            Assert.That(param.Value, Is.EqualTo(data2.Value));
        }

        [Test]
        public void TimeSpanTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var param = new { Value = TimeSpan.FromSeconds(100) };
            var data = dbContext.ExecuteScalar<TimeSpan>($"SELECT {BindVariable}Value", param);
            Assert.That(param.Value, Is.EqualTo(data));

            var query = $"SELECT {BindVariable}Value as Value";
            query = DbProvider == DbProvider.Oracle ? query + " FROM DUAL" : query;
            var data2 = dbContext.FetchOne<SimpleTimeSpanRecord>(query, param);
            Assert.That(param.Value, Is.EqualTo(data2.Value));
        }

        [Test]
        public void NullableValueTypeTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var param = new { Value = (int?)null };
            var data = dbContext.ExecuteScalar<int?>($"SELECT {BindVariable}Value", param);
            Assert.That(param.Value, Is.EqualTo(data));
            Assert.Throws<DbNullToValueTypeException>(() => dbContext.ExecuteScalar<int>($"SELECT {BindVariable}Value", param));
        }

        [Test]
        public void NullableNonValueTypeTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var param = new { Value = (string?)null };
            var data = dbContext.ExecuteScalar<string>($"SELECT {BindVariable}Value", param);
            Assert.That(param.Value, Is.EqualTo(data));

            data = dbContext.ExecuteScalar<string?>($"SELECT {BindVariable}Value", param);
            Assert.That(param.Value, Is.EqualTo(data));
        }

        [Test]
        public void NullableRecordFieldsTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var user = new UserNullableRecord(0, 3, "Sample", null, null, null, null, null);
            var id = dbContext.Insert<UserNullableRecord, int>(user);
            var output = dbContext.FetchOne<UserNullableRecord>(x => x.Id == id);
            Assert.That(user.State, Is.EqualTo(output.State));
            Assert.That(user.Salary, Is.EqualTo(output.Salary));
            Assert.That(user.Birthday, Is.EqualTo(output.Birthday));
            Assert.That(user.UserCode, Is.EqualTo(output.UserCode));
        }

        [Test]
        public void NullableClassFieldsTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var user = new UserNullableClass { Name = "Sample 2" };
            var id = dbContext.Insert<UserNullableClass, int>(user);
            var output = dbContext.FetchOne<UserNullableClass>(x => x.Id == id);
            Assert.That(user.State, Is.EqualTo(output.State));
            Assert.That(user.Salary, Is.EqualTo(output.Salary));
            Assert.That(user.Birthday, Is.EqualTo(output.Birthday));
            Assert.That(user.UserCode, Is.EqualTo(output.UserCode));
            Assert.That(user.Icon, Is.EqualTo(output.Icon));
        }

        #endregion

        #region Queries

        [Test]
        [TestCase("some value")]
        [TestCase("lorem ipsum dolor sit amet, consectetur adipiscing elit.")]
        [TestCase("lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.")]
        [TestCase("")]
        public void SingleValue(string stringValue)
        {
            var dbContext = DbHub.Use(DbSignature);
            var value = dbContext.ExecuteScalar<string>($"SELECT '{stringValue}'");

            if (DbProvider == DbProvider.Oracle)
            {
                //Oracle returns empty string as null
                Assert.That(value, Is.EqualTo(stringValue == "" ? null : stringValue));
            }
            else
            {
                Assert.That(value, Is.EqualTo(stringValue));
            }
        }

        [Test]
        [TestCase("some value")]
        [TestCase("lorem ipsum dolor sit amet, consectetur adipiscing elit.")]
        [TestCase("lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.")]
        [TestCase("")]
        [TestCase(null)]
        public void SingleByParamValue(string stringValue)
        {
            var dbContext = DbHub.Use(DbSignature);
            var value = dbContext.ExecuteScalar<string>($"SELECT {BindVariable}Value", new { Value = stringValue });
            if (DbProvider == DbProvider.Oracle)
            {
                //Oracle returns empty string as null
                Assert.That(value, Is.EqualTo(stringValue == "" ? null : stringValue));
            }
            else
            {
                Assert.That(value, Is.EqualTo(stringValue));
            }
        }

        [Test]
        [TestCase("A")]
        [TestCase("E")]
        public void ComplexQuery(string filter)
        {
            var dbContext = DbHub.Use(DbSignature);
            var result = dbContext.FetchList<User>(x => (x.State &&
                                         x.Name.Contains(filter) &&
                                         x.Birthday < DateTime.Now) ||
                                         SqlExpression.Between<User>(x => x.Birthday, new DateTime(1950, 1, 1), DateTime.MaxValue) &&
                                         (x.Salary % 2) > 0);

            Assert.That(result, Is.Not.Null);
        }

        [Test]
        [TestCase(1, 10)]
        [TestCase(1, 100)]
        [TestCase(1, 500)]
        public void QueryWithArraysParameters(int start, int count)
        {
            var list = Enumerable.Range(start, count).ToArray();
            var dbContext = DbHub.Use(DbSignature);
            var people = dbContext.FetchList<User>(x => list.Contains(x.Id));
            Assert.That(people, Is.Not.Null);
        }

        [Test]
        public void QueryWithExists()
        {
            var dbContext = DbHub.Use(DbSignature);
            var result = dbContext.FetchList<User>(x => SqlExpression.Exists<User, UserType>((user, userType) => user.UserTypeId == userType.Id));
            Assert.That(result, Is.Not.Null);
        }

        [Test]
        public void QueryWithLike()
        {
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            dbContext.Insert(new User(0, 2, "John", false, 3350.99m, new DateTime(1989, 5, 17), Guid.NewGuid(), icon));
            User result = dbContext.FetchOne<User>(x => x.Name.Contains('o') && x.Name.EndsWith("n") && x.Name.StartsWith("J"));
            Assert.That(result, Is.Not.Null);
        }

        [Test]
        public void QueryNullAndNotNull()
        {
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            var user = new UserNullableRecord(0, 2, "John", null, 351.94m, new DateTime(1996, 7, 28), Guid.NewGuid(), icon);
            dbContext.Insert(user);
            var result = dbContext.FetchOne<UserNullableRecord>(x => x.State == null && x.Name != null && x.Name == "John");
            Assert.That(result, Is.Not.Null);
            Assert.That(result.Name, Is.EqualTo(user.Name));
            Assert.That(result.State, Is.Null);
            Assert.That(result.Salary, Is.EqualTo(user.Salary));
            Assert.That(result.Birthday, Is.EqualTo(user.Birthday));
        }

        [Test]
        public async Task ComplexQueryAsync()
        {
            var dbContext = DbHub.Use(DbSignature);
            string filterName = "A";
            var result = await dbContext.FetchListAsync<User>(x => (x.State &&
                                         x.Name.Contains(filterName) &&
                                         x.Birthday < DateTime.Now) ||
                                         SqlExpression.Between<User>(x => x.Birthday, new DateTime(1950, 1, 1), DateTime.MaxValue) &&
                                         (x.Salary % 2) > 0);

            Assert.That(result, Is.Not.Null);
        }

        [Test]
        public void QueryWithSelectors()
        {
            var dbContext = DbHub.Use(DbSignature);
            var result = dbContext.FetchList<User>(x => x.Id > 0, x => new { x.Id, x.Name });
            Assert.That(result, Is.Not.Empty);
            Assert.That(result[0].Id, Is.GreaterThan(0));
            Assert.That(result[0].Name, Is.Not.Null);
            Assert.That(result[0].State, Is.EqualTo(default(bool)));
            Assert.That(result[0].Salary, Is.EqualTo(default(decimal)));
            Assert.That(result[0].Birthday, Is.EqualTo(default(DateTime)));
            Assert.That(result[0].UserCode, Is.EqualTo(default(Guid)));
        }

        [Test]
        [TestCase(1, 10)]
        [TestCase(1, 100)]
        [TestCase(1, 500)]
        public async Task QueryWithArraysParametersAsync(int start, int count)
        {
            var list = Enumerable.Range(start, count).ToArray();
            var dbContext = DbHub.Use(DbSignature);
            var people = await dbContext.FetchListAsync<User>(x => list.Contains(x.Id));
            Assert.That(people, Is.Not.Null);
        }

        [Test]
        public async Task QueryWithExistsAsync()
        {
            var dbContext = DbHub.Use(DbSignature);
            var result = await dbContext.FetchListAsync<User>(x => SqlExpression.Exists<User, UserType>((user, userType) => user.UserTypeId == userType.Id));
            Assert.That(result, Is.Not.Null);
        }

        [Test]
        public void ToListByQueryTextTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var users = dbContext.FetchList<User>("SELECT * FROM APP_USER");
            Assert.That(users, Is.Not.Empty);
        }

        [Test]
        public void ToSingleByQueryTextTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            var id = dbContext.Insert<User, int>(new User(0, 2, "Jean", true, 1340.5m, new DateTime(1997, 3, 21), Guid.NewGuid(), icon));
            var user = dbContext.FetchOne<User>($"SELECT * FROM APP_USER WHERE ID = {BindVariable}Id", new { Id = id });
            Assert.That(user, Is.Not.Null);
        }

        [Test]
        public void ToListByExpressionTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            dbContext.Insert(new User(0, 2, "Jean", true, 1340.5m, new DateTime(1997, 3, 21), Guid.NewGuid(), icon));
            var users = dbContext.FetchList<User>();
            Assert.That(users, Is.Not.Empty);
        }

        [Test]
        public void ToSingleByExpressionTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            var id = dbContext.Insert<User, int>(new User(0, 2, "Jean", true, 1340.5m, new DateTime(1997, 3, 21), Guid.NewGuid(), icon));
            var user = dbContext.FetchOne<User>(x => x.Id == id);
            Assert.That(user, Is.Not.Null);
        }

        [Test]
        public void TryFetchListByTextTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var result = dbContext.TryFetchList<User>("SELECT * FROM APP_USER");
            Assert.That(result.Success, Is.True);
            Assert.That(result.Result, Is.Not.Empty);
        }

        [Test]
        public void TryFetchOneByQueryTextTest()
        {
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            var id = dbContext.Insert<User, int>(new User(0, 2, "Jean", true, 1340.5m, new DateTime(1997, 3, 21), Guid.NewGuid(), icon));
            var result = dbContext.TryFetchOne<User>($"SELECT * FROM APP_USER WHERE ID = {BindVariable}Id", new { Id = id });
            Assert.That(result.Success, Is.True);
            Assert.That(result.Result, Is.Not.Null);
        }

        [Test]
        public async Task TryFetchListAsync()
        {
            var dbContext = DbHub.Use(DbSignature);
            var result = await dbContext.TryFetchListAsync<User>("SELECT * FROM APP_USER");
            Assert.That(result, Is.Not.Null);
            Assert.That(result.Success, Is.True);
            Assert.That(result.Result, Is.Not.Empty);
        }

        [Test]
        public async Task TryFetchListAsyncCancel()
        {
            CancellationTokenSource source = new CancellationTokenSource();
            source.CancelAfter(new TimeSpan(0, 0, 0, 0, 0, 1));

            var dbContext = DbHub.Use(DbSignature);
            var result = await dbContext.TryFetchListAsync<User>("SELECT * FROM APP_USER", null, source.Token);
            Assert.That(result, Is.Not.Null);
            Assert.That(result.Success, Is.False, "Success");
            Assert.That(result.Canceled, Is.True, "Canceled");
        }

        [Test]
        public async Task TryFetchOneAsync()
        {
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            var id = dbContext.Insert<User, int>(new User(0, 2, "Tom", true, 4400.555m, new DateTime(1995, 4, 20), Guid.NewGuid(), icon));
            var entity = await dbContext.TryFetchOneAsync<User>($"SELECT * FROM APP_USER WHERE Id = {BindVariable}id", new { id });
            Assert.That(entity.Success, Is.True);
            Assert.That(entity.Result, Is.Not.Null);
            Assert.That(entity.Result.Name, Is.EqualTo("Tom"));
            Assert.That(entity.Result.State, Is.EqualTo(true));
            Assert.That(entity.Result.Salary, Is.EqualTo(4400.555m));
            Assert.That(entity.Result.Birthday, Is.EqualTo(new DateTime(1995, 4, 20)));
        }

        class TupleParam
        {
            [DbParameter(direction: ParameterDirection.Output, isOracleCursor: true)]
            public string p_cursor1 { get; set; }

            [DbParameter(direction: ParameterDirection.Output, isOracleCursor: true)]
            public string p_cursor2 { get; set; }
        }

        [Test]
        public async Task TryFetchTupleAsync()
        {
            var dbContext = DbHub.Use(DbSignature);

            DbOpAsyncResult<Tuple<List<User>, List<UserType>>> tuple;

            if (DbProvider == DbProvider.Oracle)
            {
                 tuple = await dbContext.TryFetchTupleAsync<User, UserType>("BEGIN OPEN :p_cursor1 FOR SELECT * FROM APP_USER; OPEN :p_cursor2 FOR SELECT * FROM USER_TYPE; END;", new TupleParam());
            }
            else
            {
                tuple = await dbContext.TryFetchTupleAsync<User, UserType>("SELECT * FROM APP_USER; SELECT * FROM USER_TYPE");
            }

            Assert.That(tuple, Is.Not.Null);
            Assert.That(tuple.Success, Is.True);
            Assert.That(tuple.Result.Item1, Is.Not.Empty);
            Assert.That(tuple.Result.Item2, Is.Not.Empty);
        }

        [Test]
        public async Task TryFetchTupleAsyncCancel()
        {
            CancellationTokenSource source = new CancellationTokenSource();
            source.CancelAfter(new TimeSpan(0, 0, 0, 0, 0, 1));

            var dbContext = DbHub.Use(DbSignature);
            var tuple = await dbContext.TryFetchTupleAsync<User, UserType>("SELECT * FROM APP_USER; SELECT * FROM USER_TYPE", null, source.Token);
            Assert.That(tuple, Is.Not.Null);
            Assert.That(tuple.Success, Is.False, "Success");
            Assert.That(tuple.Canceled, Is.True, "Canceled");
        }

        [Test]
        public void FetchData()
        {
            var dbContext = DbHub.Use(DbSignature);
            var (dispose, iterator) = dbContext.FetchData<User>("SELECT * FROM APP_USER", null, 5);

            foreach (var list in iterator)
            {
                Assert.That(list.Count, Is.LessThanOrEqualTo(5));
            }

            dispose();
            Assert.Pass();
        }

        #endregion

        #region Store Procedures

        class UserTotalPostgres
        {
            public int Total { get; set; }
            public decimal TotalSalary { get; set; }
        }

        class UserTotal
        {

            [DbParameter(direction: ParameterDirection.Output)]
            public int Total { get; set; }

            //match store procedure definition precision and scale
            [DbParameter(direction: ParameterDirection.Output, precision: 15, scale: 2)]
            public decimal TotalSalary { get; set; }
        }

        [Test]
        public void GetAllStoreProcedure()
        {
            SkipIfNecessary();
            var dbContext = DbHub.Use(DbSignature);
            var user = dbContext.FetchList<User>("GET_ALL");
            Assert.That(user, Is.Not.Null);
        }

        [Test]
        public void GetUserStoreProcedure()
        {
            SkipIfNecessary();
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            var user = new User(0, 3, "Carlos", true, 1340.5m, new DateTime(1997, 3, 21), Guid.NewGuid(), icon);
            var user_id = dbContext.Insert<User, int>(user);
            var userFromDb = dbContext.FetchOne<User>("GET_USER", new { user_id });
            var userRecordFromDb = dbContext.FetchOne<UserNullableRecord>("GET_USER", new { user_id });
            var userClassFromDb = dbContext.FetchOne<UserNullableClass>("GET_USER", new { user_id });

            Assert.That(userFromDb, Is.Not.Null);
            Assert.That(userFromDb.Id, Is.EqualTo(user_id));
            Assert.That(userFromDb.Name, Is.EqualTo(user.Name));
            Assert.That(userFromDb.State, Is.EqualTo(user.State));
            Assert.That(userFromDb.Salary, Is.EqualTo(user.Salary));
            Assert.That(userFromDb.Birthday, Is.EqualTo(user.Birthday));
            Assert.That(userFromDb.UserCode, Is.EqualTo(user.UserCode));
            Assert.That(userFromDb.Icon, Is.EqualTo(user.Icon));

            Assert.That(userRecordFromDb, Is.Not.Null);
            Assert.That(userRecordFromDb.Id, Is.EqualTo(user_id));
            Assert.That(userRecordFromDb.Name, Is.EqualTo(user.Name));
            Assert.That(userRecordFromDb.State, Is.EqualTo(user.State));
            Assert.That(userRecordFromDb.Salary, Is.EqualTo(user.Salary));
            Assert.That(userRecordFromDb.Birthday, Is.EqualTo(user.Birthday));
            Assert.That(userRecordFromDb.UserCode, Is.EqualTo(user.UserCode));
            Assert.That(userRecordFromDb.Icon, Is.EqualTo(user.Icon));

            Assert.That(userClassFromDb, Is.Not.Null);
            Assert.That(userClassFromDb.Id, Is.EqualTo(user_id));
            Assert.That(userClassFromDb.Name, Is.EqualTo(user.Name));
            Assert.That(userClassFromDb.State, Is.EqualTo(user.State));
            Assert.That(userClassFromDb.Salary, Is.EqualTo(user.Salary));
            Assert.That(userClassFromDb.Birthday, Is.EqualTo(user.Birthday));
            Assert.That(userClassFromDb.UserCode, Is.EqualTo(user.UserCode));
            Assert.That(userClassFromDb.Icon, Is.EqualTo(user.Icon));
        }

        [Test]
        public void SPOutParameter()
        {
            SkipIfNecessary();
            var dbContext = DbHub.Use(DbSignature);

            if (DbProvider == DbProvider.PostgreSql)
            {
                //consider provider postgresql return output parameters as result set
                var filter = dbContext.FetchOne<UserTotalPostgres>("GET_TOTALUSER");
                Assert.That(filter.Total, Is.GreaterThan(0));
                Assert.That(filter.TotalSalary, Is.GreaterThan(0));
            }
            else
            {
                var filter = new UserTotal();
                dbContext.Execute("GET_TOTALUSER", filter);
                Assert.That(filter.Total, Is.GreaterThan(0));
                Assert.That(filter.TotalSalary, Is.GreaterThan(0));
            }
        }

        [Test]
        public void SPTuple()
        {
            SkipIfNecessary();
            var dbContext = DbHub.Use(DbSignature);
            var result = dbContext.FetchTuple<User, UserType>("GET_DATA");
            Assert.That(result.Item1, Is.Not.Empty);
            Assert.That(result.Item2, Is.Not.Empty);
        }

        [Test]
        public async Task SPOutParameterAsync()
        {
            SkipIfNecessary();
            var dbContext = DbHub.Use(DbSignature);

            if (DbProvider == DbProvider.PostgreSql)
            {
                //consider provider postgresql return output parameters as result set
                var filter = await dbContext.FetchOneAsync<UserTotalPostgres>("GET_TOTALUSER");
                Assert.That(filter.Total, Is.GreaterThan(0));
                Assert.That(filter.TotalSalary, Is.GreaterThan(0));
            }
            else
            {
                var filter = new UserTotal();
                await dbContext.ExecuteAsync("GET_TOTALUSER", filter);
                Assert.That(filter.Total, Is.GreaterThan(0));
                Assert.That(filter.TotalSalary, Is.GreaterThan(0));
            }
        }

        [Test]
        public async Task GetAllStoreProcedureAsync()
        {
            SkipIfNecessary();
            var dbContext = DbHub.Use(DbSignature);
            var user = await dbContext.FetchListAsync<User>("GET_ALL");
            Assert.That(user, Is.Not.Null);
        }

        [Test]
        public async Task GetUserStoreProcedureAsync()
        {
            SkipIfNecessary();
            var dbContext = DbHub.Use(DbSignature);
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "TDataIco.png"));
            var user = new User(0, 3, "Carlos", true, 1340.5m, new DateTime(1997, 3, 21), Guid.NewGuid(), icon);
            var user_id = dbContext.Insert<User, int>(user);
            var userFromDb = await dbContext.FetchOneAsync<User>("GET_USER", new { user_id });
            var userRecordFromDb = await dbContext.FetchOneAsync<UserNullableRecord>("GET_USER", new { user_id });
            var userClassFromDb = await dbContext.FetchOneAsync<UserNullableClass>("GET_USER", new { user_id });

            Assert.That(userFromDb, Is.Not.Null);
            Assert.That(userFromDb.Id, Is.EqualTo(user_id));
            Assert.That(userFromDb.Name, Is.EqualTo(user.Name));
            Assert.That(userFromDb.State, Is.EqualTo(user.State));
            Assert.That(userFromDb.Salary, Is.EqualTo(user.Salary));
            Assert.That(userFromDb.Birthday, Is.EqualTo(user.Birthday));
            Assert.That(userFromDb.UserCode, Is.EqualTo(user.UserCode));
            Assert.That(userFromDb.Icon, Is.EqualTo(user.Icon));

            Assert.That(userRecordFromDb, Is.Not.Null);
            Assert.That(userRecordFromDb.Id, Is.EqualTo(user_id));
            Assert.That(userRecordFromDb.Name, Is.EqualTo(user.Name));
            Assert.That(userRecordFromDb.State, Is.EqualTo(user.State));
            Assert.That(userRecordFromDb.Salary, Is.EqualTo(user.Salary));
            Assert.That(userRecordFromDb.Birthday, Is.EqualTo(user.Birthday));
            Assert.That(userRecordFromDb.UserCode, Is.EqualTo(user.UserCode));
            Assert.That(userRecordFromDb.Icon, Is.EqualTo(user.Icon));

            Assert.That(userClassFromDb, Is.Not.Null);
            Assert.That(userClassFromDb.Id, Is.EqualTo(user_id));
            Assert.That(userClassFromDb.Name, Is.EqualTo(user.Name));
            Assert.That(userClassFromDb.State, Is.EqualTo(user.State));
            Assert.That(userClassFromDb.Salary, Is.EqualTo(user.Salary));
            Assert.That(userClassFromDb.Birthday, Is.EqualTo(user.Birthday));
            Assert.That(userClassFromDb.UserCode, Is.EqualTo(user.UserCode));
            Assert.That(userClassFromDb.Icon, Is.EqualTo(user.Icon));
        }

        [Test]
        public void LoadStream()
        {
            using var memoryStream = new MemoryStream();
            DbHub.Use(DbSignature).LoadStream($"SELECT ICON FROM APP_USER WHERE Id = {BindVariable}Id", new { Id = 1 }, memoryStream);
            Assert.That(memoryStream, Is.Not.Null);
        }

        [Test]
        public async Task LoadStreamAsync()
        {
            using var memoryStream = new MemoryStream();
            await DbHub.Use(DbSignature).LoadStreamAsync($"SELECT ICON FROM APP_USER WHERE Id = {BindVariable}Id", new { Id = 1 }, memoryStream);
            Assert.That(memoryStream, Is.Not.Null);
        }

        [Test]
        public void LoadTextStream_UTF8()
        {
            //insert data long text
            var db = DbHub.Use(DbSignature);
            var originalText = @"
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam maximus ornare posuere. Integer at sem ut mi finibus pretium ac vel magna. Maecenas quis leo est. Maecenas dapibus ipsum tellus, ac luctus ipsum varius a. Sed volutpat tellus quis egestas dignissim. Fusce molestie felis non ex rutrum sagittis. Vestibulum accumsan, mi a vulputate rhoncus, felis lectus accumsan magna, at gravida velit lacus eu dolor.
                Vivamus elit magna, accumsan in imperdiet vel, venenatis sed ex. Nam lacinia urna quis sem consequat, eu tempor ante venenatis. Curabitur porta dictum blandit. Proin eu leo lobortis, molestie ipsum sit amet, egestas nibh. Aliquam erat volutpat. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent ultricies auctor ex. Quisque dolor ante, tristique nec lobortis rutrum, fringilla vitae nulla. Vivamus molestie viverra purus, a tincidunt lorem malesuada vel. Interdum et malesuada fames ac ante ipsum primis in faucibus. Morbi dignissim, ligula aliquam rhoncus mattis, lectus ligula consequat quam, at interdum elit ligula id massa. Cras vehicula ligula odio, eu commodo magna pellentesque non. Integer mattis justo magna, sit amet pulvinar erat efficitur eget. Maecenas efficitur libero id dolor ultricies gravida. Integer sed consectetur mauris.
                Proin laoreet accumsan quam a molestie. Aliquam lobortis risus id lectus aliquet, et blandit lacus convallis. Sed in libero nunc. Pellentesque ligula mauris, condimentum nec tempor a, maximus quis risus. Etiam efficitur odio dolor, a sagittis lacus blandit et. Proin in sapien nisl. Curabitur at auctor mi.
                Aenean ac tellus et sem suscipit gravida a eu mauris. Phasellus vitae urna pellentesque, auctor odio ac, vulputate velit. Vivamus imperdiet eu lacus non lacinia. Maecenas at bibendum nisi. Phasellus tempor finibus lorem a pretium. Phasellus et elit id lorem congue tristique. Etiam rutrum, massa ut eleifend porta, enim diam dictum libero, quis venenatis tortor turpis non erat. Suspendisse feugiat ipsum nisi, quis congue neque mollis fermentum. Phasellus iaculis eget magna vitae tempus. Etiam nec congue erat. Pellentesque elit erat, mollis in efficitur ut, suscipit ornare ligula. Fusce at sem id neque ullamcorper pretium. Duis non neque non diam faucibus molestie eu sed elit. Nulla at egestas lectus.
                Nulla hendrerit ante quis metus varius hendrerit. Proin euismod mattis sapien nec venenatis. Curabitur vitae feugiat purus. Vivamus eget justo luctus nibh porttitor varius vel ac ipsum. Nam neque tellus, malesuada in ipsum eu, eleifend porttitor nunc. In hac habitasse platea dictumst. Praesent neque eros, varius sit amet turpis at, condimentum faucibus tellus. Ut sit amet molestie turpis, at aliquam tellus. Integer non dignissim velit. Aliquam suscipit risus ligula, vitae tempus turpis accumsan in. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Curabitur scelerisque mauris at cursus consectetur. Fusce efficitur tellus quis faucibus hendrerit. Aenean in ipsum sed dui posuere faucibus. Sed ultrices pellentesque imperdiet.";

            var id = db.Insert<Book, int>(new Book(originalText));

            //retrieve and save into a file
            var directory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            var filePath = Path.Combine(directory, $"sample_text_{Guid.NewGuid()}.txt");
            using (var streamWriter = new StreamWriter(filePath, false))
            {
                db.LoadTextStream($"SELECT CONTENT FROM BOOK WHERE Id = {BindVariable}Id", new { Id = id }, streamWriter);
            }

            var text = File.ReadAllText(filePath);
            Assert.That(text, Is.Not.Null);
            Assert.That(text, Is.EqualTo(originalText));
            File.Delete(filePath);
        }

        [Test]
        public void LoadTextStream_Unicode()
        {
            //insert data long text
            var db = DbHub.Use(DbSignature);
            var originalText = @"გთხოვთ ახლავე გაიაროთ რეგისტრაცია Unicode-ის მეათე საერთაშორისო
                                      კონფერენციაზე დასასწრებად, რომელიც გაიმართება 10-12 მარტს,
                                      ქ. მაინცში, გერმანიაში. კონფერენცია შეჰკრებს ერთად მსოფლიოს
                                      ექსპერტებს ისეთ დარგებში როგორიცაა ინტერნეტი და Unicode-ი,
                                      ინტერნაციონალიზაცია და ლოკალიზაცია, Unicode-ის გამოყენება
                                      ოპერაციულ სისტემებსა, და გამოყენებით პროგრამებში, შრიფტებში,
                                      ტექსტების დამუშავებასა და მრავალენოვან კომპიუტერულ სისტემებში.";
            var id = db.Insert<Book, int>(new Book(originalText));

            //retrieve and save into a file
            var directory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            var filePath = Path.Combine(directory, $"sample_text_{Guid.NewGuid()}.txt");
            using (var streamWriter = new StreamWriter(filePath, false, Encoding.Unicode))
            {
                db.LoadTextStream($"SELECT CONTENT FROM BOOK WHERE Id = {BindVariable}Id", new { Id = id }, streamWriter);
            }

            var text = File.ReadAllText(filePath);
            Assert.That(text, Is.Not.Null);
            Assert.That(text, Is.EqualTo(originalText));
            File.Delete(filePath);
        }
        #endregion

        [TearDown]
        public void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == NUnit.Framework.Interfaces.TestStatus.Failed)
                TestContext.WriteLine($"Test failed for provider: {DbProvider}");
        }

    }
}
