using Thomas.Database.Configuration;
using Thomas.Database.Core.FluentApi;
using Thomas.Cache;

namespace Thomas.Database.Tests
{
    public class InMemoryCacheTests : IDatabaseProvider
    {
        public string ConnectionString => Environment.GetEnvironmentVariable("SqlServerCnx") ?? "Data Source=localhost;Initial Catalog=tempdb;Persist Security Info=True;User ID=sa;Password=Mssql_Test;TrustServerCertificate=true;packet size=2048;ApplicationIntent=ReadOnly;Min Pool Size=32;Max Pool Size=64;Pooling=true";

        private static void CreateAndPopulateTable()
        {
            var dbContext = DbFactory.GetDbContext("db1");
            var icon = File.ReadAllBytes(Path.Combine(".", "Content", "ThomasIco.png"));

            dbContext.ExecuteBlock((db) =>
            {
                db.Execute("DROP TABLE IF EXISTS USERS");
                db.Execute("CREATE TABLE USERS(ID INT PRIMARY KEY IDENTITY(1,1), USER_TYPE_ID INT NOT NULL, NAME VARCHAR(50), STATE BIT, SALARY DECIMAL(15,2), BIRTHDAY DATE, USERCODE UniqueIdentifier, ICON VARBINARY(MAX))");

                //TODO: replace for bulk insert
                db.Add(new UserNullableRecord(0, 3, "Sample 1", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 2", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 3", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 4", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 5", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 6", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 7", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 8", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 9", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 10", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 11", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 12", null, null, null, null, null));
                db.Add(new UserNullableRecord(0, 3, "Sample 13", null, null, null, null, null));
            });
        }

        [OneTimeSetUp]
        public void Initialize()
        {
            DbConfigurationFactory.Clear();
            var tableBuilder = new TableBuilder();
            var table = tableBuilder.AddTable<User>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<User>().DbName("USERS");
            table.Column<User>(x => x.UserTypeId).DbName("USER_TYPE_ID");
            var table2 = tableBuilder.AddTable<UserNullableRecord>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<UserNullableRecord>().DbName("USERS");
            table2.Column<UserNullableRecord>(x => x.UserTypeId).DbName("USER_TYPE_ID");
            var table3 = tableBuilder.AddTable<UserNullableClass>(x => x.Id, keyAutoGenerated: true).AddFieldsAsColumns<UserNullableClass>().DbName("USERS");
            table3.Column<UserNullableClass>(x => x.UserTypeId).DbName("USER_TYPE_ID");
            tableBuilder.AddTable<UserType>(x => x.Id, keyAutoGenerated: false).AddFieldsAsColumns<UserType>().DbName("USER_TYPE");
            DbFactory.AddDbBuilder(tableBuilder);
            DbConfigurationFactory.Register(new DbSettings("db1", SqlProvider.SqlServer, ConnectionString));
            CreateAndPopulateTable();
        }

        #region first time call to database
        [Test, Order(1)]
        public void GetAllUsersFromDbAndSaveInCache()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var users = dbContext.ToList<User>();
            Assert.That(users.Count, Is.EqualTo(13));
        }

        [Test, Order(2)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        public void GetOneUserFromDbAndSaveInCache(int id)
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var users = dbContext.ToList<User>(x => x.Id == id);
            Assert.That(users.Count, Is.EqualTo(1));
        }

        [Test, Order(3)]
        public void GetTupleFromDbAndSaveInCache()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var users = dbContext.ToTuple<User, User>("SELECT * FROM USERS; SELECT * FROM USERS");
            Assert.That(users.Item1.Count, Is.EqualTo(13));
            Assert.That(users.Item2.Count, Is.EqualTo(13));
        }

        [Test, Order(4)]
        public void GetUserFromDbByKeyAndSaveInCache()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var filter = "Sample 1";
            var user = dbContext.ToSingle<User>(x => x.Name == filter, key: "FILTER_1");
            Assert.That(user.Name, Is.EqualTo(filter));
        }

        [Test, Order(5)]
        public void GetUsersFromDbByKeyAndSaveInCache()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var users = dbContext.ToList<UserNullableRecord>(x => x.Birthday == null, key: "FILTER_2");
            Assert.That(users.Count, Is.EqualTo(13));
        }

        const string Tuple2Query = "SELECT * FROM USERS WHERE ID > @user_id; SELECT * FROM USERS WHERE Name like CONCAT('%',@filter_name,'%')";
        [Test, Order(6)]
        public void GetTupleFromDbByKeyAndSaveInCache()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var tuple = dbContext.ToTuple<UserNullableRecord, UserNullableRecord>(Tuple2Query, new { user_id = 0, filter_name = "sample" }, key: "FILTER_3");
            Assert.That(tuple.Item1.Count, Is.EqualTo(13));
            Assert.That(tuple.Item2.Count, Is.EqualTo(13));
        }

        const string Tuple3Query = "SELECT * FROM USERS WHERE ID > @user_id; SELECT * FROM USERS WHERE Name like CONCAT('%',@filter_name,'%'); SELECT * FROM USERS WHERE ID > @user_id";
        [Test, Order(7)]
        public void GetTuple3FromDbByKeyAndSaveInCache()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var tuple = dbContext.ToTuple<UserNullableRecord, UserNullableRecord, UserNullableRecord>(Tuple3Query, new { user_id = 0, filter_name = "sample" }, key: "FILTER_4");
            Assert.That(tuple.Item1.Count, Is.EqualTo(13));
            Assert.That(tuple.Item2.Count, Is.EqualTo(13));
            Assert.That(tuple.Item3.Count, Is.EqualTo(13));
        }
        #endregion

        [Test, Timeout(5), Order(8)]
        public void GetAllUsersFromCache()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var users = dbContext.ToList<User>();
            Assert.That(users.Count, Is.EqualTo(13));
        }

        [Test, Timeout(3), Order(8)]
        [TestCase(1)]
        [TestCase(2)]
        [TestCase(3)]
        public void GetOneUserFromCache(int id)
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var users = dbContext.ToList<User>(x => x.Id == id);
            Assert.That(users.Count, Is.EqualTo(1));
        }

        [Test, Timeout(3), Order(8)]
        public void GetTupleFromCache()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var users = dbContext.ToTuple<User, User>("SELECT * FROM USERS; SELECT * FROM USERS");
            Assert.That(users.Item1.Count, Is.EqualTo(13));
            Assert.That(users.Item2.Count, Is.EqualTo(13));
        }

        [Test, Timeout(3), Order(8)]
        public void GetUserFromCacheByKey()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var filter = "Sample 1";
            var user = dbContext.ToSingle<User>(x => x.Name == filter, key: "FILTER_1");
            Assert.That(user.Name, Is.EqualTo(filter));
        }

        [Test, Timeout(3), Order(8)]
        public void GetTuple3FromCache()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var tuple = dbContext.ToTuple<UserNullableRecord, UserNullableRecord, UserNullableRecord>(Tuple3Query, new { user_id = 0, filter_name = "sample" }, key: "FILTER_4");
            Assert.That(tuple.Item1.Count, Is.EqualTo(13));
            Assert.That(tuple.Item2.Count, Is.EqualTo(13));
            Assert.That(tuple.Item3.Count, Is.EqualTo(13));
        }


        [Test, Timeout(3), Order(8)]
        public void GetUsersFromCacheByKey()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var users = dbContext.ToList<UserNullableRecord>(x => x.Birthday == null, key: "FILTER_2");
            Assert.That(users.Count, Is.EqualTo(13));
        }


        [Test, Timeout(3), Order(8)]
        public void GetTupleFromCacheByKey()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            var users = dbContext.ToTuple<UserNullableRecord, UserNullableRecord>(Tuple2Query, new { user_id = 0, filter_name = "sample" }, key: "FILTER_3");
            Assert.That(users.Item1.Count, Is.EqualTo(13));
            Assert.That(users.Item2.Count, Is.EqualTo(13));
        }

        [Test, Order(9)]
        [TestCase("FILTER_1")]
        [TestCase("FILTER_2")]
        [TestCase("FILTER_3")]
        [TestCase("FILTER_4")]
        public void RefreshByKey(string key)
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            dbContext.Refresh(key, throwErrorIfNotFound: true);
            Assert.Pass();
        }

        [Test, Order(10)]
        [TestCase("FILTER_1")]
        [TestCase("FILTER_2")]
        [TestCase("FILTER_3")]
        [TestCase("FILTER_4")]
        public void ClearByKey(string key)
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            dbContext.Clear(key);
            Assert.Pass();
        }

        [Test, Order(8)]
        [TestCase("FILTER_INVALID_1")]
        [TestCase("FILTER_INVALID_2")]
        public void SafeClearInvalidKey(string key)
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            dbContext.Clear(key);
            Assert.Throws<KeyNotFoundException>(() => dbContext.Refresh(key, throwErrorIfNotFound: true));
        }

        [OneTimeTearDown]
        public void ClearAll()
        {
            var dbContext = CachedDbFactory.GetDbContext("db1");
            dbContext.Clear();
        }
    }
}
