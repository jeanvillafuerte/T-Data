using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace Thomas.Database.Core.FluentApi
{
    public class TableBuilder
    {
        internal Dictionary<string, DbTable> Tables;

        public TableBuilder()
        {
            Tables = new Dictionary<string, DbTable>();
        }

        public DbTable Configure<T>()
        {
            var tableType = typeof(T);
            var table = new DbTable { Name = tableType.Name! };
            Tables.Add(tableType.FullName!, table);
            return table;
        }

        public DbTable Configure<T>(Expression<Func<T, object>> key, bool keyAutogenerated = true)
        {
            var memberExpression = EnsureSelectedMember(key);
            var keyColumnName = memberExpression.Member.Name;
            var tableType = key.Parameters[0].Type;
            var keyColumn = new DbColumn { Required = true, Name = keyColumnName, Property = tableType.GetProperty(keyColumnName)!, Autogenerated = keyAutogenerated };
            var table = new DbTable
            {
                Name = tableType.Name!,
                Key = keyColumn
            };
            table.Columns.Add(keyColumn);
            Tables.Add(tableType.FullName!, table);
            return table;
        }

        internal static void AddColumns<T>(DbTable table, string key, Type type)
        {
            ReadOnlySpan<PropertyInfo> properties = type.GetProperties().Where(x => string.IsNullOrEmpty(key) || x.Name != key).ToArray();
            foreach (var property in properties)
            {
                table.Columns.Add(new DbColumn { Name = property.Name, Property = property });
            }
        }

        internal static MemberExpression EnsureSelectedMember<T>(Expression<Func<T, object>> expression)
        {
            if (!(expression.Body is UnaryExpression unaryExpression && unaryExpression.Operand is MemberExpression memberExpression && expression.Parameters.Count == 1))
                throw new ArgumentException("Expression must be a member expression");

            return memberExpression;
        }
    }
}
